<!DOCTYPE html>
<html>
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"/>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<title>Vocal synthesizer</title>
<style>
@font-face {
  font-family: "DejaVu";
  src: url("/vocalise/fonts/dejavu/DejaVuSansMono.ttf") format("truetype");
}
@font-face {
  font-family: "DejaVuBold";
  src: url("/vocalise/fonts/dejavu/DejaVuSansMono-Bold.ttf") format("truetype");
}
@font-face {
  font-family: "DejaVuSans";
  src: url("/vocalise/fonts/dejavu/DejaVuSans.ttf") format("truetype");
}
@font-face {
  font-family: "DejaVuSansBold";
  src: url("/vocalise/fonts/dejavu/DejaVuSans-Bold.ttf") format("truetype");
}
*, body {
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
  font-family: 'DejaVu', monospace;
  line-height: 1em;
}
button {
  margin:0 0 0 4px;
  padding: 0 4px;
  border: 0;
  font-size: 16px;
  height: 24px;
  width: 32px;
}
#upload, #upload_voice {
  display: none;
}
#pre, #pitch, #color {
  -webkit-user-select: none; /* Safari */
  -ms-user-select: none; /* IE 10 and IE 11 */
  user-select: none; /* Standard syntax */
}
body {
  padding:0;
  margin:0;
  user-select: none;
  touch-action: none;
  overflow: hidden;
}
#hscroll, #scroll {
  font-size:8px;
  background-color:lightgray;
  overflow:scroll;
  position:fixed;
  margin:0;
  padding:0;
  border:0;
}
#hscroll {
  letter-spacing:-0.525em; /*-0.175em;*/
  height:16px;
  width:128vw;
  left:0;
  top:0;
}
#scroll {
  overflow-wrap: break-word;
  white-space: break-spaces;
  resize: none;
  width: 1em;
  padding-right:1em;
  height:96em;
  right:0;
  top:16px;
}
#pre {
  position:fixed;
  left: 64px;
  top: 16px;
  margin: 0;
  padding: 0;
  font-weight:bold;
  font-size:8px;
  letter-spacing:-0.525em; /*-0.175em;*/
  line-height:1em;
  height:96em;
  width:100vw;
  max-width:100vw;
  overflow:hidden;
  background-color:white !important;
  filter: blur(3px); /*blur(4px) brightness(67%) contrast(300%);*/
  touch-action: none;
}
#pre span {
  display:none;
}
#panel {
  width: 320px;
  position: fixed;
  bottom: 0;
  left: 50%;
  margin-left: -180px;
  visibility:hidden;
}
#toolbar {
  background-color:white;
  height:120px;
  position: absolute;
  bottom:296px;
  left:20px;
  border: 0;
  border-bottom: 1px solid lightgray;
}
label {
  font-size:32px;
  line-height:16px;
}
#toolbar a {
  color: black;
  text-decoration: none;
  font-size:16px;
  font-weight: bold;
}
#toolbar p {
  margin: 12px 0;
}
#color, #brush {
  float:left;
  height:32px;
  line-height:32px;
  letter-spacing:-0.2em;
  font-weight:bold;
  font-size:2px;
  background-color:white !important;
  filter: blur(1px) brightness(67%) contrast(300%);
}
#brush {
  text-align:center;
  font-size:4px;
  width:32px;
  border:none;
  padding:0;
  margin:0;
}
#sound, #noise, #eraser {
  margin: 2px;
  height: 16px;
  width: 16px;
  filter: grayscale(1);
  opacity: 0.5;
}
#controls, #data {
  font-size:16px;
  float: right;
}
#arrow {
  text-decoration:overline;
  font-size:14px;
}
#pitch {
  margin: 0;
  padding: 0;
  font-weight:bold;
  font-size:8px;
  letter-spacing:0;
  line-height:1em;
  height:96em;
  width:63px;
  border-right:1px solid gray;
  position:fixed;
  left:0;
  top:16px;
  max-width:63px;
  overflow:hidden;
  touch-action: none;
}
#cursor {
  line-height:1em;
  letter-spacing:0;
  font-weight:bold;
  font-size:8px;
  position:absolute;
  top:16px;
  left:0;
}
#cheat {
  background-color:white;
  column-count: 3;
  position: absolute;
  bottom: 0;
  left: 36px;
  width:270px;
  height:296px;
  line-height:1em;
  margin:0;
  padding:0;
}
#cheat div {
  float: right;
  margin: 2px 0;
  padding:0;
}
#cheat b {
  font-size:14px;
}
#cheat span {
  font-size:12px;
}
#cheat u {
  text-decoration:none;
  opacity:0.5;
}
#cheat a {
  margin-left:4px;
  color:black;
  text-decoration:none;
  font-size:8px;
  vertical-align: middle;
  filter: blur(2px) brightness(70%) contrast(250%);
}
audio {
  height:16px;
  width:288px;
}
.scale {
  position:relative;
  top:0.25em;
  letter-spacing:0;
}
#hz {
  position:absolute;
  left:350px;
}
#spectrogram {
  position:absolute;
  bottom:0;
  left:24px;
  border: none;
  border-top:2px dashed lightgray;
}
#synthesizer {
  display:none;
  text-align: center;
  color: black;
  font-size: 16px;
  text-decoration:none;
  width:30px;
  height:24px;
  position:fixed;
  right:0px;
  bottom:0px;
}
</style>
</head>
<body oncontextmenu="return false;" onload="phonemes();">
<span id="cursor">‚Øà</span>
<pre id="pitch" onmousedown="m=true;" onmouseup="m=false;" onmouseleave="m=false;" onmousemove="if(m && m===true){draw(event.target, parseInt(event.pageX/s*pr), 0, null);}" ontouchstart="m=true;" ontouchend="m=false;" ontouchcancel="m=false;" ontouchmove="if(m && m===true){draw(event.target, parseInt(event.changedTouches[0].pageX/s*pr), event.changedTouches[0].radiusY, parseInt((event.changedTouches[0].pageY-16)/s));}" onkeydown="if(event.key=='ArrowUp'){t--;point();}else if(event.key=='ArrowDown'){t++;point();}else{draw(p[l_old+t+1], kbrd.indexOf(event.key), 0, null);t++;point();}" tabindex="1"></pre>
<pre id="pre" onmousedown="m=true;" onmouseup="m=false;" onmouseleave="m=false;" onmousemove="if(m && m===true){draw(event.target, parseInt((event.pageX-64+this.scrollLeft)/s*r), 0, null);}" ontouchstart="m=true;" ontouchend="m=false;" ontouchcancel="m=false;" ontouchmove="if(m && m===true){draw(event.target, parseInt((event.changedTouches[0].pageX-64+this.scrollLeft)/s*r), event.changedTouches[0].radiusY, parseInt((event.changedTouches[0].pageY-16)/s));}" onkeydown="if(event.key=='ArrowUp'){t--;point();}else if(event.key=='ArrowDown'){t++;point();}else{draw(span[l_old+t+1], kbrd.indexOf(event.key)+parseInt(this.scrollLeft/s*r), 0, null);t++;point();}" onwheel="setVolume(event);" tabindex="0"></pre>
<div id="hscroll" onscroll="pre.scrollLeft=this.scrollLeft;"></div>
<textarea id="scroll" onscroll="show(parseInt(this.scrollTop/s))"></textarea>
<div id="panel">
  <pre id="cheat"></pre>
  <div id="toolbar">
      <input id="brush" type="text" value="‚†Ç‚†Ü‚°á‚°∑‚£ø‚£ø‚£ø‚£ø‚°∑‚°á‚†Ü‚†Ç"/><div id="color" onmousedown="m=true;" onmouseup="m=false;" onmousemove="if(m && m===true){set(event.pageX-this.getBoundingClientRect().left);}" ontouchstart="m=true;" ontouchend="m=false;" ontouchmove="if(m && m===true){set(event.changedTouches[0].pageX);}"></div><br/>
      <label for="sound">‚úë</label><input title="Sound" id="sound" type="radio" name="tool" checked/>
      <label for="noise">‚úé</label><input title="Noise" id="noise" type="radio" name="tool"/>
      <label for="eraser">‚ùë</label><input title="Eraser" id="eraser" type="radio" name="tool"/>
      <span id="controls">
        <button title="Play" onclick="if(!ac){init();}play();">‚ñ∂</button><button title="Stop" onclick="if(!ac){init();}stop();">‚ñ†</button><button title="Record" onclick='if(!ac){init();}recordSpeech();'>‚óè</button><button title="Upload" onclick='if(!ac){init();}uploadVoice(null);' id='arrow'>ü°Ö</button><input type="file" id="upload_voice" onchange="uploadVoice(this.files[0]);"/>
      </span>
      <p><audio controls onplay="if(mediaRecorder && mediaRecorder.state=='paused'){mediaRecorder.resume();}" onpause="if(mediaRecorder && mediaRecorder.state=='recording'){mediaRecorder.pause();}"></audio></p>
      <a href="/img2b" target="_blank">üñª import</a>
      <span id="data">
        <a href="javascript:openCsv(null);">üóÅ open</a><input type="file" id="upload" onchange="openCsv(this.files[0]);"/> &nbsp; <a href="javascript:saveCsv();">üñ´ save</a><a id="download"></a>
      </span>
  </div>
  <canvas id="spectrogram" width="288" height=32></canvas>
</div>
<a id="synthesizer" title="Synthesizer" href="#" onclick="showPanel();">üéò</a>
<script type="text/javascript" src="spectrogram.js"></script>
<script type="text/javascript" src="piano.js"></script>
<script>
var pitch = document.getElementById("pitch");
var pre = document.getElementById("pre");
var span = pre.getElementsByTagName("span");
var p = pitch.getElementsByTagName("span");
var color = document.getElementById("color");
var brush = document.getElementById("brush");
var cheat = document.getElementById("cheat");
var noise = document.getElementById("noise");
var eraser = document.getElementById("eraser");
var download = document.getElementById("download");
var upload = document.getElementById("upload");
var upload_voice = document.getElementById("upload_voice");
var hscroll = document.getElementById("hscroll");
var scroll = document.getElementById("scroll");
var scr = new Array(2048);
scroll.value = scr.join("\n");

var ph = {
  "u ‚îÇ": ['‚ñà‚ñà     ‚ñí  ‚ñë ', 1.0],
  " ä ‚ïµ": ['‚ñÄ ‚ñÄ    ‚ñÄ  ‚ñÄ ', 1.0],
 "o ä ‚îÇ": ['‚ñÑ‚ñÄ‚ñà    ‚ñí  ‚ñë ', 1.0],
  "…î ‚ïµ": [' ‚ñÄ‚ñÄ    ‚ñÄ  ‚ñÄ ', 1.0],
  "…ë ‚îÇ": [' ‚ñà ‚ñà   ‚ñí  ‚ñë ', 1.0],
  " å ‚ïµ": [' ‚ñÄ ‚ñÄ   ‚ñÄ  ‚ñÄ ', 1.0],
  "…ô ‚îÇ": [' ‚ñà  ‚ñà  ‚ñí  ‚ñë ', 1.0],
  "√¶ ‚îÇ": [' ‚ñà  ‚ñÄ‚ñÑ ‚ñí  ‚ñë ', 1.0],
  "…õ ‚ïµ": [' ‚ñÄ   ‚ñÄ ‚ñÄ  ‚ñÄ ', 1.0],
 "e…™ ‚îÇ": ['‚ñÑ‚ñÄ   ‚ñÄ‚ñÑ‚ñí  ‚ñë ', 1.0],
  "…™ ‚ïµ": ['‚ñÄ     ‚ñÄ‚ñÄ  ‚ñÄ ', 1.0],
  "i ‚îÇ": ['‚ñà     ‚ñà‚ñí  ‚ñë ', 1.0],
 "a…™ ‚îÇ": ['‚ñÑ‚ñÄ ‚ñÄ  ‚ñÑ‚ñí  ‚ñë ', 1.0],
 "…î…™ ‚îÇ": ['‚ñÑ‚ñÄ‚ñÄ   ‚ñÑ‚ñí  ‚ñë ', 1.0],
 "a ä ‚îÇ": ['‚ñÑ‚ñÄ‚ñÑ‚ñÄ   ‚ñí  ‚ñë ', 1.0],
  "w ‚ïµ": ['‚ñÄ‚ñÄ     ‚ñÄ  ‚ñÄ ', 0.75],
  "m ‚îÇ": ['‚ñà‚ñì  ‚ñí ‚ñë     ', 0.75],
  "n ‚îÇ": ['‚ñà ‚ñì ‚ñí ‚ñë     ', 0.75],
  "≈ã ‚îÇ": ['‚ñà  ‚ñì‚ñí ‚ñë     ', 0.75],
  "l ‚îÇ": ['‚ñà‚ñì   ‚ñí‚ñë     ', 0.75],
  "j ‚ïµ": ['‚ñÄ      ‚ñÄ‚ñÄ ‚ñÄ ', 0.75],
  "…π ‚îÇ": ['‚ñà‚ñì‚ñí   ‚ñë     ', 0.5],
  "h  ": ['   ‚ñà‚ñì‚ñí‚ñë     ', 0.5],
  "v ‚îÇ": ['  ‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí', 0.5],
  "f  ": ['  ‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí', 0.5],
  "√∞ ‚îÇ": ['  ‚ñí‚ñí‚ñí‚ñí    ‚ñí‚ñí', 0.5],
  "Œ∏  ": ['  ‚ñí‚ñí‚ñí‚ñí    ‚ñí‚ñí', 0.5],
  " í ‚îÇ": ['      ‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí', 0.5],
  " É  ": ['      ‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí', 0.5],
  " § ‚îÇ": ['        ‚ñí‚ñí‚ñí‚ñí', 0.5],
  " ß  ": ['        ‚ñí‚ñí‚ñí‚ñí', 0.5],
  "z ‚îÇ": ['          ‚ñí‚ñí', 0.5],
  "s  ": ['          ‚ñí‚ñí', 0.25],
  "b ‚ï∑": ['‚ñÑ‚ñÑ  ‚ñÑ ‚ñÑ     ', 0.25],
  "p  ": ['‚ñÑ‚ñÑ  ‚ñÑ ‚ñÑ     ', 0.25],
  "d ‚ï∑": ['‚ñÑ ‚ñÑ ‚ñÑ ‚ñÑ     ', 0.25],
  "t  ": ['‚ñÑ ‚ñÑ ‚ñÑ ‚ñÑ     ', 0.25],
  "g ‚ï∑": ['‚ñÑ  ‚ñÑ‚ñÑ ‚ñÑ     ', 0.25],
  "k  ": ['‚ñÑ  ‚ñÑ‚ñÑ ‚ñÑ     ', 0.25],
};

var br = (
  "‚†Ä‚¢Ä‚††‚¢†‚†ê‚¢ê‚†∞‚¢∞‚†à‚¢à‚†®‚¢®‚†ò‚¢ò‚†∏‚¢∏" +
  "‚°Ä‚£Ä‚°†‚£†‚°ê‚£ê‚°∞‚£∞‚°à‚£à‚°®‚£®‚°ò‚£ò‚°∏‚£∏" +
  "‚†Ñ‚¢Ñ‚†§‚¢§‚†î‚¢î‚†¥‚¢¥‚†å‚¢å‚†¨‚¢¨‚†ú‚¢ú‚†º‚¢º" +
  "‚°Ñ‚£Ñ‚°§‚£§‚°î‚£î‚°¥‚£¥‚°å‚£å‚°¨‚£¨‚°ú‚£ú‚°º‚£º" +
  "‚†Ç‚¢Ç‚†¢‚¢¢‚†í‚¢í‚†≤‚¢≤‚†ä‚¢ä‚†™‚¢™‚†ö‚¢ö‚†∫‚¢∫" +
  "‚°Ç‚£Ç‚°¢‚£¢‚°í‚£í‚°≤‚£≤‚°ä‚£ä‚°™‚£™‚°ö‚£ö‚°∫‚£∫" +
  "‚†Ü‚¢Ü‚†¶‚¢¶‚†ñ‚¢ñ‚†∂‚¢∂‚†é‚¢é‚†Æ‚¢Æ‚†û‚¢û‚†æ‚¢æ" +
  "‚°Ü‚£Ü‚°¶‚£¶‚°ñ‚£ñ‚°∂‚£∂‚°é‚£é‚°Æ‚£Æ‚°û‚£û‚°æ‚£æ" +
  "‚†Å‚¢Å‚†°‚¢°‚†ë‚¢ë‚†±‚¢±‚†â‚¢â‚†©‚¢©‚†ô‚¢ô‚†π‚¢π" +
  "‚°Å‚£Å‚°°‚£°‚°ë‚£ë‚°±‚£±‚°â‚£â‚°©‚£©‚°ô‚£ô‚°π‚£π" +
  "‚†Ö‚¢Ö‚†•‚¢•‚†ï‚¢ï‚†µ‚¢µ‚†ç‚¢ç‚†≠‚¢≠‚†ù‚¢ù‚†Ω‚¢Ω" +
  "‚°Ö‚£Ö‚°•‚£•‚°ï‚£ï‚°µ‚£µ‚°ç‚£ç‚°≠‚£≠‚°ù‚£ù‚°Ω‚£Ω" +
  "‚†É‚¢É‚†£‚¢£‚†ì‚¢ì‚†≥‚¢≥‚†ã‚¢ã‚†´‚¢´‚†õ‚¢õ‚†ª‚¢ª" +
  "‚°É‚£É‚°£‚££‚°ì‚£ì‚°≥‚£≥‚°ã‚£ã‚°´‚£´‚°õ‚£õ‚°ª‚£ª" +
  "‚†á‚¢á‚†ß‚¢ß‚†ó‚¢ó‚†∑‚¢∑‚†è‚¢è‚†Ø‚¢Ø‚†ü‚¢ü‚†ø‚¢ø" +
  "‚°á‚£á‚°ß‚£ß‚°ó‚£ó‚°∑‚£∑‚°è‚£è‚°Ø‚£Ø‚°ü‚£ü‚°ø‚£ø"
).split("");

//sort by brightness
var bn = {};
for (var i = 0; i<256; i++) {
	bn[br[i]] = i.toString(2).replace(/0/g, "").length;
}
br.sort(function(a, b){return bn[a] - bn[b]});

var br_ = new RegExp("("+br.join("|")+")", "g");
color.innerText = br.join("");

var sb = (" ‚ñë‚ñí‚ñì‚ñà").split("");
//https://en.wikipedia.org/wiki/Box-drawing_character

var kbrd = ("1234567890-=").split("");
var kbrd_n = ("qwertyuiop[]").split("");
var base_ = ("asdfghjkl;'zxcvbnm,./").split("");

var real = new Float32Array(2048);
var imag = new Float32Array(2048);
var freq = 16.0; //lowest audible
var voice = 128.0; //lowest voice
var c_length = 96;
var lines = 96;
var s = 8;
var r = 5.715; //1.905;
var pr = 1.67;
var ac = null;
var gain = [];
var osc = [];
var delays = [];
var t = 0;
var m = false;
var txt = "";
var l_old = 0;
var scale = 1;

var base = voice;

var l = new Array(2048);
var k = new Array(24);
l.fill("‚†Ä");          //dots space
k.fill(" ");          //regular space
var l = l.join("");
var k = k.join("");
var ln = [];
ln[0] = "";
ln[1] = "";
for (var i=0; i<2048; i++) {
  ln[0] += "<span></span>";
  ln[1] += "<span></span>";
}
pre.innerHTML = ln[0];
pitch.innerHTML = ln[1];
for (var i=0; i<lines; i++) {
  span[i].style.display = "block";
  p[i].style.display = "block";
  span[i].innerText = "|" + l;
  p[i].innerText = k;
}
scr.fill("‚†Ä");
for (var i=0; i<=192; i+=16) {
  scr[i] = "‚°á";
}
hscroll.innerHTML = "<span class='scale'>‚ñë‚ñà‚ñë‚ñà‚ñë‚ñë‚ñà‚ñë‚ñà‚ñë‚ñà‚ñë‚ñë‚†Ä0</span>" + scr.join("") + "<span id='hz' class='scale'>3072 Hz</span>";
scr = null;

var chunks = [], dest, mediaRecorder, masterGain, source;
var constraints = { audio: true };
var spectrogram = null;

function initRec() {
  dest = ac.createMediaStreamDestination();
  mediaRecorder = new MediaRecorder(dest.stream);
  document.querySelector("audio").srcObject = dest.stream;
  document.querySelector("audio").playbackRate = 1.0;
  document.querySelector("audio").play();
    
  mediaRecorder.ondataavailable = function(evt) {
    // push each chunk (blobs) in an array
    chunks.push(evt.data);
  };
    
  mediaRecorder.onstop = function(evt) {
    // Make blob out of our blobs, and open it.
    document.querySelector("audio").srcObject = null;
    let blob = new Blob(chunks, { 'type' : 'audio/wav' });
    document.querySelector("audio").src = URL.createObjectURL(blob);
    document.querySelector("audio").playbackRate = 4.0;
    chunks = [];
  };
}

function init() {
  ac = new (window.AudioContext || window.webkitAudioContext)({latencyHint:"interactive", sampleRate: 44100});
  masterGain = ac.createGain();
  masterGain.gain.value = 1.0;
  spectrogram = new App.Spectrogram(ac, document.getElementById('spectrogram'));
  spectrogram.acceptConnection(masterGain);
  
  source = ac.createMediaElementSource(document.querySelector("audio"));
  spectrogram.acceptConnection(source);
  
  for (var i=0; i<2; i++) {
    gain[i] = ac.createGain();
    gain[i].gain.value = 0.0;
    
    osc[i] = ac.createOscillator();
    osc[i].frequency.value = freq;
    osc[i].connect(gain[i]);
    osc[i].start();
  }
  
  for (var i=0; i<15; i++) {
    delays[i] = ac.createDelay((i+1)/freq);
    delays[i].delayTime.value = (i+1)/voice;
    for (var j=0; j<2; j++) {
      delays[i].connect(masterGain);
      gain[j].connect(delays[i]);
    }
  }
  console.log("initialized.");
}

function play() {
  if (!mediaRecorder || masterGain.gain.value == 0) {
    initRec();
    masterGain.connect(dest);
    mediaRecorder.start();
  } else {
    mediaRecorder.resume();
  }
  masterGain.gain.linearRampToValueAtTime(1.0, ac.currentTime + 0.001);
  
  var binary = [];
  binary[0] = pre.innerText.split("\n");
  binary[1] = pitch.innerText.split("\n");
  for (var i=0; i<binary.length; i++) {
    for (var j=0; j<binary[i].length; j++) {
      binary[i][j] = binary[i][j].replace(/[\|\d\w]/g, "‚†Ä").split("");
    }
  }
  t = 0;
  
  var iv = setInterval(function() {
    if (binary[0][t]) {
      for (var i=0; i<2048; i++) {
        var amp = br.indexOf(binary[0][t][i]) / (br.length-1);
        if (!amp) { amp = 0; }
        if (i == 0) { i = 1; } //0th is initial phase not harmonic
        real[i] = (Math.random()*2-1) * amp / i;
        imag[i] = (Math.random()*2-1) * amp / i;
      }
      var wave = ac.createPeriodicWave(real, imag, {disableNormalization: false}); //The default is false
      if (parseInt(t/2) == t/2) {
        osc[0].setPeriodicWave(wave);
        gain[0].gain.linearRampToValueAtTime(0.0625, ac.currentTime + 0.005);
        gain[1].gain.linearRampToValueAtTime(0.0, ac.currentTime + 0.005);
      } else {
        osc[1].setPeriodicWave(wave);
        gain[1].gain.linearRampToValueAtTime(0.0625, ac.currentTime + 0.005);
        gain[0].gain.linearRampToValueAtTime(0.0, ac.currentTime + 0.005);
      }
      // /\/\/\/\/
      // _/\/\/\/\
      var j = 1;
      var f = binary[1][t].indexOf("‚ñà");
      while (binary[1][t+j] && binary[1][t+j].indexOf("‚ñà") == f) {
        j++;
      }
      if (f > -1) {
        base = Math.pow(2, f/12) * voice;
        for (var i=0; i<15; i++) {
          delays[i].delayTime.exponentialRampToValueAtTime((i+1)/base, ac.currentTime + 0.032*j);
        }
      } else {
        for (var i=0; i<15; i++) {
          delays[i].delayTime.exponentialRampToValueAtTime((i+1)/base*(1-Math.random()), ac.currentTime + 0.032*j);
        }
      }
      //console.log(t);
      t++;
    } else {
      t = 0;
      clearInterval(iv);
      stop();
    }
  }, 1);
}

function stop() {
  masterGain.gain.linearRampToValueAtTime(0.0, ac.currentTime + 0.001);
  if (mediaRecorder.state != 'inactive') {
    mediaRecorder.requestData();
    mediaRecorder.stop();
  }
}

  function recordSpeech() {
    if (navigator.mediaDevices.getUserMedia) {
      console.log('getUserMedia supported.');

      let onSuccess = function(stream) {
        mediaRecorder = new MediaRecorder(stream);
        document.querySelector("audio").srcObject = stream;
        document.querySelector("audio").playbackRate = 1.0;
        document.querySelector("audio").play();
          
        mediaRecorder.ondataavailable = function(evt) {
          // push each chunk (blobs) in an array
          chunks.push(evt.data);
        };
          
        mediaRecorder.onstop = function(evt) {
          // Make blob out of our blobs, and open it.
          document.querySelector("audio").srcObject = null;
          let blob = new Blob(chunks, { 'type' : 'audio/wav' });
          document.querySelector("audio").src = URL.createObjectURL(blob);
          document.querySelector("audio").playbackRate = 1.0;
          chunks = [];
        };

        mediaRecorder.start();
        console.log(mediaRecorder.state);
        console.log("recorder started");
      }
      
      let onError = function(err) {
        console.log(err);
      }
      navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);
    }
  }

function show(l_) {
  for (var i=l_old; i<l_old+lines; i++) {
    if (span[i] && p[i]) {
      span[i].removeAttribute("style");
      p[i].removeAttribute("style");
    }
  }
  for (var i=l_; i<l_+lines; i++) {
    if (span[i] && p[i]) {
      span[i].style.display = "block";
      p[i].style.display = "block";
      if (span[i].innerText == "" || p[i].innerText == "") {
        span[i].innerText = "|" + l;
        p[i].innerText = k;
      }
    }
  }
  l_old = l_;
  if (l_+lines > c_length) {
    c_length = l_+lines;
    //console.log(c_length);
  }
}

function draw(c, x, v, y) {
  if (x > -1) {
    if (c.parentElement.id == "pre") {
      var n = 0;
      if (noise.checked === true) {
        if (!v || v == 0) {
          v = 0;
          for (var i=0; i<brush.value.length; i++) {
            v += br.indexOf(brush.value.charAt(i));
          }
          v = v / (brush.value.length * 255) * scale;
        } else {
          v /= 16;
        }
        ln[n] = "";
        for (var j=x; j<x+brush.value.length; j++) {
          ln[n] += br[Math.round(Math.random()*(br.length-1)*v*br.indexOf(brush.value.charAt(j-x))/256)];
        }
      } else if (eraser.checked === true) {
        ln[n] = brush.value.replace(/./g, "‚†Ä");
      } else {
        if (!v || v == 0) {
          v = scale;
        } else {
          v /= 16;
        }
        ln[n] = brush.value.replace(/./g, function(x){ return br[Math.round(br.indexOf(x)*v)]; });
      }
      if (y) { c = span[y]; }
      console.log(v + " " + ln[n]);
      txt = c.innerText;
    } else {
      var n = 1;
      if (eraser.checked === true) {
        ln[n] = " ";
      } else {
        ln[n] = "‚ñà";
      }
      if (v && v > 0) {
        c = p[y];
      }
      txt = k;
    }
    txt = txt.substr(0, x) + ln[n] + txt.substr(x+ln[n].length);
    c.innerText = txt;
  }
}

function hiss(x) {
  var n = "";
  for (var j=(12-x.length)*16+1; j<parseInt(8192/freq); j++) {
    n += br[Math.round(Math.random()*(br.length-1))];
  }
  return n;
}

function sibilance(x) {
  var n = "";
  for (var j=0; j<4*16; j++) {
    n += br[Math.round(Math.random()*(br.length-1))];
  }
  return n;
}

function add(v) {
  var line = [];
  line[0] = "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä" + v.replace(/[‚ñë‚ñí‚ñì‚ñà‚ñÄ]+$/, hiss).replace(/[‚ñë‚ñí‚ñì‚ñà‚ñÄ]{4}/, sibilance).replace(/[‚ñë‚ñí‚ñì‚ñà‚ñÄ]/g, "‚†Ä‚†Ä‚†Ç‚†Ü‚°á‚°∑‚£ø‚£ø‚£ø‚£ø‚°∑‚°á‚†Ü‚†Ç‚†Ä‚†Ä").replace(/[‚ñÑ ]/g, "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä");
  line[1] = "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä" + v.replace(/[‚ñë‚ñí‚ñì‚ñà‚ñÑ]+$/, hiss).replace(/[‚ñë‚ñí‚ñì‚ñà‚ñÑ]{4}/, sibilance).replace(/[‚ñë‚ñí‚ñì‚ñà‚ñÑ]/g, "‚†Ä‚†Ä‚†Ç‚†Ü‚°á‚°∑‚£ø‚£ø‚£ø‚£ø‚°∑‚°á‚†Ü‚†Ç‚†Ä‚†Ä").replace(/[‚ñÄ ]/g, "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä");
  
  for (var i=0; i<2; i++) {
    txt = line[i] + l.substr(line[i].length);
    span[l_old+t+i+1].innerText = "|" + txt;
  }
  t+=2;
  point();
}

function set(x) {
  var b = brush.selectionStart;
  var d = brush.selectionEnd;
  brush.value = brush.value.substr(0, b) + color.innerText.charAt(parseInt(x)) + brush.value.substr(d);
}

function setVolume(event) {
  event.preventDefault();
  scale += event.deltaY * -0.001;
  // Restrict scale
  scale = Math.min(Math.max(0.0039, scale), 1);
  console.log("volume: " + scale);
}

function point() {
  if (t <= 0) {
    t = 0;
  } else if (t >= c_length) {
    t = c_length - 1;
  }
  cursor.style.top = (t*s+s/2+16) + "px";
}

function phonemes() {
  for (var i=0; i<Object.keys(ph).length; i++) {
    var n = Object.keys(ph)[i];
    var v = Object.values(ph)[i][0];
    var s = Math.pow(Object.values(ph)[i][1], 1/2);
    cheat.innerHTML += "<div><b style='color:rgba(0,0,0,"+s+");'>" + n.split(" ")[0] + "</b> <span>" + n.slice(-1) + "</span><a href='#' onclick='add(this.innerText);'>" + v.replace(/[‚ñÄ‚ñÑ]\s+[‚ñÄ‚ñÑ]\s+$/, function(x){ return "<u>"+x+"</u>"; }) + "</a></div>";
  }
}

function content(v) {
  if (v === true) {
    for (var i=0; i<c_length; i++) {
      if (span[i] && p[i]) {
        span[i].style.display = "block";
        p[i].style.display = "block";
      }
    }
  } else {
    for (var i=0; i<c_length; i++) {
      if (span[i] && p[i]) {
        span[i].removeAttribute("style");
        p[i].removeAttribute("style");
      }
    }
  }
}

function saveCsv() {
  content(true);
  var a = [];
  var p_ = pitch.innerText.split("\n");
  var f_ = pre.innerText.split("\n");
  for (var i=0; i<c_length; i++) {
    if (p_[i] && f_[i]) {
      a[i] = p_[i] + f_[i] + "\n";
    }
  }
  var filename = "spectrogram.csv";
  download.setAttribute('href', 'data:text/csv;charset=utf-8,' + encodeURIComponent(a.join("").slice(0,-1)));
  download.setAttribute('download', filename);
  download.click();
  content(false);
}

function openCsv(file) {
  if (!file) {
    upload.click();
  } else {
    var reader  = new FileReader();
    reader.addEventListener("load", function () {
      var a = reader.result.split("\n");
      var p_ = [];
      var f_ = [];
      for (var i=0; i<span.length; i++) {
        if (a[i]) {
          a[i] = a[i].split("|");
          p_[i] = "<span>" + a[i][0] + "</span>";
          f_[i] = "<span>|" + a[i][1] + "</span>";
        } else {
          f_[i] = "<span></span>";
          p_[i] = "<span></span>";
        }
      }
      pre.innerHTML = f_.join("");
      pitch.innerHTML = p_.join("");
      show(0);
      upload.value = null;
    }, false);
  
    if (file && file.name.slice(-4) == ".csv") {
      reader.readAsText(file);
    }
  }
}

function uploadVoice(file) {
  if (!file) {
    upload_voice.click();
  } else {
    document.querySelector("audio").src = URL.createObjectURL(file);
  }
}


function lerp(start, end, amt) {
  return (1-amt)*start+amt*end;
}


function morph() {
  var arr = txt.value.split("\n");
  arr[0] = arr[0].split("");
  var arr_old = arr[0];
  var i_old = 0;
  
  for (var i=1; i<arr.length; i++) {
    arr[i] = arr[i].split("");
    if (arr[i].length > 0) {
      for (var j=0; j<arr[i].length; j++) {
        for (var k=i_old+1; k<i; k++) {
          arr[k][j] = br[Math.round(lerp(br.indexOf(arr_old[j]), br.indexOf(arr[i][j]), (k-i_old)/(i-i_old)))];
        }
      }
      arr_old = arr[i];
      i_old = i;
    }
  }
  for (var i=0; i<arr.length; i++) {
    arr[i] = arr[i].join("");
  }
  txt.value = arr.join("\n");
}


function smooth() {
  for (var i=0; i<256; i++) {
    var avg = (d[frame*256+i]+d[frame*256+i+1]+d[frame*256+i+2]+d[frame*256+i+3])/4;
    p[i] = i+","+avg;
  }
}


function showPanel() {
  if (panel.style.visibility!='visible') {
    panel.style.visibility='visible';
  } else {
    panel.style.visibility='hidden';
  }
}

</script>
</body>
</html>
